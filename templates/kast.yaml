# kast - Kubernetes arcane spelling technology
# Copyright (C) 2023 namenmalkv@gmail.com
#
# This work is licensed under the Creative Commons Attribution-ShareAlike 
# NonCommercial (CC BY-SA-NC) license. See the LICENSE file for details.
{{- define "debug" -}}
{{- if (index . 0) -}}
{{ printf "%s:" (index . 2) }}
{{- toYaml (index . 1) | nindent 2 -}}
{{- end -}}
{{- end -}}

{{- $debug := ""}}

{{- define "configmap" -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ index . 0 }}
data:
  spellbook: |
    {{- toYaml (index . 1) | nindent 4 }}
{{- end -}}

{{- $spellbook :=  dict "appParams" $.Values.appParams  }}

#se puede agregar un if aca para q si no este definido el libro haga un "ls" y ver q libros hay y haga de multibook on one sweep

{{- $path := printf "library/%s/index.yaml" .Values.name }}
{{- if .Files.Glob $path }}
  {{- $default := .Files.Get $path | fromYaml }}
  {{- $_ := mergeOverwrite $default (dict "name" $.Values.name ) }}
  {{- $_ := mergeOverwrite $spellbook $default }}
{{- end }}

{{ include "debug" (list $debug $spellbook "spellbook" ) }}

##lexicon definition must be from a config map in some place
{{- $lexiconDefinition := dict }}
{{- $path := print "library/" $spellbook.name "/_lexicon/*.y*ml"}}
{{- $lexicon := list }}
{{- range $lexiconPath, $_ := .Files.Glob $path }}
  {{- $lexiconDefinitions := ($.Files.Get $lexiconPath | fromYaml).lexicon }}
  {{- range $lexiconDefinition := $lexiconDefinitions }}
    {{- $lexicon = append $lexicon $lexiconDefinition }}
  {{- end }}
{{- end }}
##lexicon merge 

{{ include "debug" (list $debug $spellbook "spellbook" ) }}
{{ include "configmap" (list "lexicon" (dict "lexicon" $lexicon) )}}

{{ range $chapterName := $spellbook.chapters }}
  {{- $chapterIndex := dict "chapter" (dict "name" $chapterName) }}
  {{- $path := print "library/" $spellbook.name "/" $chapterName "/index.yaml" }}
  {{- if $.Files.Glob $path }}
    {{- $chapterIndex = dict "chapter" ($.Files.Get $path | fromYaml) }}
  {{- end }}
  {{- $path := print "library/" $spellbook.name "/" $chapterName "/*.y*ml"}}
  {{- range $spellPath, $_ := $.Files.Glob $path }}
  {{- if not (eq $spellPath (print "library/" $spellbook.name "/" $chapterName "/index.yaml")) }}
    {{- $sources := list }}
    {{- $appParams := deepCopy $spellbook.appParams }} 
    {{- $spellDefinition := ($.Files.Get $spellPath | fromYaml) }}
    {{- $_ := mergeOverwrite $appParams (default dict ($chapterIndex.appParams)) }}
    {{- $_ := mergeOverwrite $appParams (deepCopy (default dict ($spellDefinition.appParams ))) }}
    {{- $spell := (dict "name" $spellDefinition.name ) }}
    {{- if $spellDefinition.runes }}
      {{- range $rune := $spellDefinition.runes }}
        {{- $sources = append $sources $rune }}
        {{- $_ := mergeOverwrite $appParams (default dict $rune.appParams ) }}
      {{- end }}
    {{- end }}





---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ $spellDefinition.name }}
  namespace: {{ default "argocd" $spellbook.argocdNamespace }}
  {{- with ($spellDefinition.app).customFinalizers }}
  finalizers:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with ($spellDefinition.app).annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  syncPolicy:
    {{- if $appParams.managedNamespaceMetadata }}
      {{- with $appParams.managedNamespaceMetadata }}
    managedNamespaceMetadata:
    {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- end }}
    {{- if not $appParams.disableAutoSync }}
    {{- with $appParams.syncPolicy.automated }}
    automated:
    {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- end }}
    {{- with $appParams.syncPolicy.syncOptions }}
    syncOptions:
    {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- with $appParams.syncPolicy.retry }}
    retry:
    {{- toYaml . | nindent 6 }}
    {{- end }}  
  project: {{ default $spellbook.name $spellDefinition.useExistingProject }}
  sources:
  {{- if or $spellDefinition.chart $spellDefinition.path }}
    - repoURL: {{ $spellDefinition.repository }} #usa repo
      {{- if $spellDefinition.chart }}
      chart: {{ $spellDefinition.chart }}
      {{- else }}
      path: {{ $spellDefinition.path }}
      {{- end }}
      targetRevision: {{ $spellDefinition.revision }}
      helm:
      {{- if ($spellDefinition.app).skipCrds }}
        skipCrds: true
      {{- end }}
      {{- if not $spellDefinition.cleanDefinition }}
        parameters: #placeholder
          - name: name
            value: {{ $spellDefinition.name }}
      {{- end }}
      {{- $definition := "" }}
      {{- if or $spellDefinition.chart $spellDefinition.path }}
      {{- $definition = $spellDefinition.definition }}
      {{- $_ =  unset $definition "runes" }}
      {{- end }}
      {{- $cleanSpellbook := merge (dict "spellbook" (deepCopy $spellbook)) }}
      {{- $_ =  unset $cleanSpellbook.spellbook "appParams" }}
      {{- $_ =  unset $cleanSpellbook.spellbook "defaultSpell" }}
        values: |
          {{- if $definition }}
          {{- toYaml $definition | nindent 10 }}
          {{- end }}
          {{- if not $spellDefinition.cleanDefinition }}
          {{- toYaml $cleanSpellbook | nindent 10 }}
          {{- toYaml $chapterIndex | nindent 10 }}
          lexicon:
          {{- toYaml $lexicon | nindent 12 }}
          {{- end }}
  {{- end }}

    {{- if $spellDefinition.runes }}
    {{- range $rune := $spellDefinition.runes }}
    {{- $_ := mergeOverwrite $appParams (default dict $rune.appParams ) }}
      {{- if not $rune.name }}
        {{- $_ := merge $rune (dict "name" (printf "%s-rune" $spellDefinition.name))  }}
      {{- end }}
    - repoURL: {{ default $spellbook.defaultSpell.repository $rune.repository }}
      {{- if $rune.chart }}
      chart: {{ $rune.chart }}
        {{- else }}
      path: {{ default $spellbook.defaultSpell.path $rune.path }}
        {{- end }}
      targetRevision: {{ default $spellbook.defaultSpell.revision $rune.revision }}
      helm:
        {{- if $rune.skipCrds }}
        skipCrds: true
        {{- end }}
        {{- if not $spellDefinition.cleanDefinition }}
        parameters:
          - name: name
            value: {{ $rune.name }}
          - name: spell.name
            value: {{ $spellDefinition.name }}
        {{- end}}
        values: |
          {{- $cleanSpellbook := merge (dict "spellbook" (deepCopy $spellbook)) }}
          {{- $_ =  unset $cleanSpellbook.spellbook "appParams" }}
          {{- if $rune.definition }}
          {{- toYaml $rune.definition | nindent 10 }}
          {{- end }}
          {{- if not $spellDefinition.cleanDefinition }}
          {{- toYaml $cleanSpellbook | nindent 10 }}
          {{- toYaml $chapterIndex | nindent 10 }}
          lexicon:
          {{- toYaml $lexicon | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
  destination:
    server: "https://kubernetes.default.svc"
    namespace: {{ if $spellDefinition.namespace }}{{ $spellDefinition.namespace }}{{ else }}{{ default $spellDefinition.name $spellDefinition.namespace }}{{ end }}
  {{- if ($appParams).ignoreDifferences }}
  ignoreDifferences:
  {{- toYaml $appParams.ignoreDifferences | nindent 4 }}
  {{- end }}
  {{- include "debug" (list $debug $sources $spellPath ) | nindent 0 }}
  {{- end }}
  {{- end }}
{{- end }}
